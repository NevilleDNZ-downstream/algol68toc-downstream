\Chapter{Answers}{app-ans}

\begin{answer}{1}
\item[\special{html:<a href="ex-i-i">}Ex\special {html:</a>}
\special{html:<a name="ans-i-i">}1.1\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 Yes, it contains lower-case letters.
\item[(b)]
 Yes, it starts with a digit.
\item[(c)]
 No.
\item[(d)]
 Yes, a space is included.
\item[(e)]
 Yes, a full stop is included.
\end{description}
\item[\special{html:<a href="ex-i-ii">}Ex\special {html:</a>}
\special{html:<a name="ans-i-ii">}1.2\special {html:</a>}]
 It starts with
a capital letter and continues with capital letters, digits or
underscores with no intervening spaces, tab characters or newline
characters.
\end{answer}

\begin{answer}{1}
\item[\special{html:<a href="ex-i-iii">}Ex\special {html:</a>}
\special{html:<a name="ans-i-iii">}1.3\special {html:</a>}]
 33
\item[\special{html:<a href="ex-i-iv">}Ex\special {html:</a>}
\special{html:<a name="ans-i-iv">}1.4\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 It contains commas.
\item[(b)]
 It contains a decimal point.
\item[(c)]
 It is not a denotation: it is a formula (see
chapter 2).
\end{description}
\end{answer}

\begin{answer}{1}
\item[\special{html:<a href="ex-i-v">}Ex\special {html:</a>}
\special{html:<a name="ans-i-v">}1.5\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 It is not an identifier: it is a
mode-indicant.
\item[(b)]
 Nothing---it's all right.
\item[(c)]
 It contains a minus symbol.
\item[(d)]
 It contains upper-case letters.
\end{description}
\item[\special{html:<a href="ex-i-vi">}Ex\special {html:</a>}
\special{html:<a name="ans-i-vi">}1.6\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 The \verb|>| symbol should
be \verb|=|.
\item[(b)]
 The integer
denotation is larger than the largest integer that the compiler can
handle.
\end{description}
\item[\special{html:<a href="ex-i-vii">}Ex\special {html:</a>}
\special{html:<a name="ans-i-vii">}1.7\special {html:</a>}]
 \verb|INT max int = 2 147 483 647|
\end{answer}

\begin{answer}{1}
\item[\special{html:<a href="ex-i-viii">}Ex\special {html:</a>}
\special{html:<a name="ans-i-viii">}1.8\special {html:</a>}]
 \verb|"." "," "8"|
\item[\special{html:<a href="ex-i-ix">}Ex\special {html:</a>}
\special{html:<a name="ans-i-ix">}1.9\special {html:</a>}]
 \verb|CHAR question mark = "?"|
\end{answer}

\begin{answer}{1}
\item[\special{html:<a href="ex-i-x">}Ex\special {html:</a>}
\special{html:<a name="ans-i-x">}1.10\special {html:</a>}]
 The \verb|5.| should be \verb|5.0|. Either the semicolon
should be replaced by a comma, or \verb|z| should be preceded by
\verb|REAL| or \verb|INT|.
\item[\special{html:<a href="ex-i-xi">}Ex\special {html:</a>}
\special{html:<a name="ans-i-xi">}1.11\special {html:</a>}]
 \verb|REAL light year = 9.454 26 e15|\newline
(assuming 365 days per year).
\end{answer}

\begin{answer}{1}
\item[\special{html:<a href="ex-i-xii">}Ex\special {html:</a>}
\special{html:<a name="ans-i-xii">}1.12\special {html:</a>}]
 The print phrase has one opening parenthesis and two
closing ones and there is no \verb|CONTEXT| \verb|VOID| \verb|USE|
\verb|standard| preceding the \verb|BEGIN|.
\item[\special{html:<a href="ex-i-xiii">}Ex\special {html:</a>}
\special{html:<a name="ans-i-xiii">}1.13\special {html:</a>}]
 The first displays \verb|20| at the start of the line.
The second displays \verb*|        +20   +48930767| on one line.
\end{answer}

\begin{answer}{1}
\item[\special{html:<a href="ex-i-xiv">}Ex\special {html:</a>}
\special{html:<a name="ans-i-xiv">}1.14\special {html:</a>}]
 It should display your
name without quote symbols on the screen.  Here is an example
program:-
\begin{verbatim}
   PROGRAM ex1 9 1 CONTEXT VOID
   USE standard
   BEGIN
      CHAR s="S", i="i", a="a", n="n";
      CO Letters of my first name CO
      print(s); print(i);
      print(a); print(n)
   END
   FINISH
\end{verbatim}
\noindent
which will display \verb|Sian| on the screen.
\end{answer}

\begin{answer}{1}
\item[\special{html:<a href="ex-i-xv">}Ex\special {html:</a>}
\special{html:<a name="ans-i-xv">}1.15\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|1996|
\item[(b)]
 \verb|"e"|
\item[(c)]
 \verb|0.142857|
\end{description}
\item[\special{html:<a href="ex-i-xvi">}Ex\special {html:</a>}
\special{html:<a name="ans-i-xvi">}1.16\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 Yes, it contains spaces.
\item[(b)]
 Yes, it contains a decimal point.
\item[(c)]
 No.
\item[(d)]
 Yes, it starts with a digit.
\end{description}
\item[\special{html:<a href="ex-i-xvii">}Ex\special {html:</a>}
\special{html:<a name="ans-i-xvii">}1.17\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|INT fifty five = 55|
\item[(b)]
 \verb|REAL three times two point seven = 8.1|
\item[(c)]
 \verb|CHAR colon=":"|
\end{description}
\item[\special{html:<a href="ex-i-xviii">}Ex\special {html:</a>}
\special{html:<a name="ans-i-xviii">}1.18\special {html:</a>}]
 Yes, you cannot guarantee that the declaration for
\verb|x| will be elaborated before the declaration of \verb|y|. The
declarations should be written
\begin{verbatim}
   REAL x = 1.234;
   REAL y = x
\end{verbatim}
\item[\special{html:<a href="ex-i-xix">}Ex\special {html:</a>}
\special{html:<a name="ans-i-xix">}1.19\special {html:</a>}]
 \verb|0| denotes an integer with mode \verb|INT|,
\verb|0.0| denotes a real number with mode \verb|REAL|.
\item[\special{html:<a href="ex-i-xx">}Ex\special {html:</a>}
\special{html:<a name="ans-i-xx">}1.20\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex1 11 6 CONTEXT VOID
   USE standard
   BEGIN
      print(0.5);  print(blank);
      print("G");  print(1);
      print(blank);print(":");
      print(34 000 000)
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{2}
\item[\special{html:<a href="ex-ii-i">}Ex\special {html:</a>}
\special{html:<a name="ans-ii-i">}2.1\special {html:</a>}]
 \verb|INT minus thirty five = -35|
\item[\special{html:<a href="ex-ii-ii">}Ex\special {html:</a>}
\special{html:<a name="ans-ii-ii">}2.2\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|1|
\item[(b)]
 \verb|1.0|
\item[(c)]
 \verb|5.0|
\item[(d)]
 \verb|0|
\item[(e)]
 \verb|5|
\end{description}
\item[\special{html:<a href="ex-ii-iii">}Ex\special {html:</a>}
\special{html:<a name="ans-ii-iii">}2.3\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|6|
\item[(b)]
 \verb|-6|
\item[(c)]
 \verb|13.5|
\item[(d)]
 \verb|4.5|
\end{description}
\end{answer}

\begin{answer}{2}
\item[\special{html:<a href="ex-ii-iv">}Ex\special {html:</a>}
\special{html:<a name="ans-ii-iv">}2.4\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|5|
\item[(b)]
 \verb|-45.0|
\item[(c)]
 \verb|-61|
\end{description}
\end{answer}

\begin{answer}{2}
\item[\special{html:<a href="ex-ii-v">}Ex\special {html:</a>}
\special{html:<a name="ans-ii-v">}2.5\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|20| \verb|INT|
\item[(b)]
 \verb|1| \verb|INT|
\item[(c)]
 \verb|1.25| \verb|REAL|
\item[(d)]
 \verb|1| \verb|INT|
\item[(e)]
 \verb|17.0| \verb|REAL|
\end{description}
\item[\special{html:<a href="ex-ii-vi">}Ex\special {html:</a>}
\special{html:<a name="ans-ii-vi">}2.6\special {html:</a>}]
 Your answer should be something like this:-
\begin{verbatim}
   PROGRAM ex2 4 2 CONTEXT VOID
   USE standard
   BEGIN
      print(-7 MOD 3);
      print( 7 MOD -3);
      print(-7 MOD -3)
   END
   FINISH
\end{verbatim}
\noindent
This will display
\begin{verbatim*}
         +2          +1          +2
\end{verbatim*}
on your screen.
\item[\special{html:<a href="ex-ii-vii">}Ex\special {html:</a>}
\special{html:<a name="ans-ii-vii">}2.7\special {html:</a>}]
 \verb|REAL two pi = 2 * pi|
\end{answer}

\begin{answer}{2}
\item[\special{html:<a href="ex-ii-viii">}Ex\special {html:</a>}
\special{html:<a name="ans-ii-viii">}2.8\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|4| \verb|INT|
\item[(b)]
 \verb|3.25| \verb|REAL|
\item[(c)]
 \verb|12| \verb|INT|
\end{description}
\end{answer}

\begin{answer}{2}
\item[\special{html:<a href="ex-ii-ix">}Ex\special {html:</a>}
\special{html:<a name="ans-ii-ix">}2.9\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|-3| \verb|INT|
\item[(b)]
 \verb|-9| \verb|REAL|
\item[(c)]
 \verb|2.0|
\verb|REAL|
\end{description}
\item[\special{html:<a href="ex-ii-x">}Ex\special {html:</a>}
\special{html:<a name="ans-ii-x">}2.10\special {html:</a>}]
 \verb|1.5|
\end{answer}

\begin{answer}{2}
\item[\special{html:<a href="ex-ii-xi">}Ex\special {html:</a>}
\special{html:<a name="ans-ii-xi">}2.11\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|5|
\item[(b)]
 \verb|2|
\item[(c)]
 \verb|345|
\item[(d)]
 \verb|32|
\item[(e)]
 \verb|"1"|
\item[(f)]
 \verb|8|
\item[(g)]
 \verb|0.0|
\end{description}
\item[\special{html:<a href="ex-ii-xii">}Ex\special {html:</a>}
\special{html:<a name="ans-ii-xii">}2.12\special {html:</a>}]
 The first \verb|print| phrase
displays
\begin{verbatim}
   $0.0000000000000000$
\end{verbatim}
\noindent
(16 zeros) and the second displays \verb|+infinity|.
\item[\special{html:<a href="ex-ii-xiii">}Ex\special {html:</a>}
\special{html:<a name="ans-ii-xiii">}2.13\special {html:</a>}]
 The compiler detects
the error and rejects it.
\item[\special{html:<a href="ex-ii-xiv">}Ex\special {html:</a>}
\special{html:<a name="ans-ii-xiv">}2.14\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 The brackets should be replaced with
parentheses.
\item[(b)]
 There are more opening than
closing parentheses. The first opening parenthesis should be deleted.
\item[(c)]
 The operator \verb|ROUND| has not been
declared to use an operand with mode \verb|CHAR|.
\item[(d)]
 The operator \verb|ENTIER| has
not been declared for use with an operand with mode \verb|INT|.
\end{description}
\end{answer}

\begin{answer}{3}
\item[\special{html:<a href="ex-iii-i">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-i">}3.1\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 Strictly speaking, the
definition of Algol~68 allows parentheses wherever brackets (\verb|[|
and \verb|]|) are allowed. Fortunately or unfortunately, the
\ix{a68toc} compiler flags this as an error.
\item[(b)]
 The apostrophes should
be replaced by quote symbols.
\item[(c)]
 The value \verb|2.0| in
the row-display cannot be coerced to a value of mode \verb|INT| in a
strong context (or any context, for that matter).
\end{description}
\item[\special{html:<a href="ex-iii-ii">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-ii">}3.2\special {html:</a>}]
 \verb|[]INT first 4 odd numbers = (1,3,5,7)|
\item[\special{html:<a href="ex-iii-iii">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-iii">}3.3\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|8|
\item[(b)]
 \verb|1|
\item[(c)]
 \verb|3|
\end{description}
\item[\special{html:<a href="ex-iii-iv">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-iv">}3.4\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|1 LWB a|, \verb|1 UPB a|, \verb|2 LWB a|,
\verb|2 UPB a|, \verb|3 LWB a|,\newline
\texttt{3 UPB a}
\item[(b)]
 \verb|LWB b|, \verb|UPB b|
\end{description}
\end{answer}

\begin{answer}{3}
\item[\special{html:<a href="ex-iii-v">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-v">}3.5\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|6|
\item[(b)]
 \verb|(9,10,11,12)|
\item[(c)]
 \verb|(4,8,12,16)|
\end{description}
\item[\special{html:<a href="ex-iii-vi">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-vi">}3.6\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|r[3,2]|
\item[(b)]
 \verb|r[2,]|
\item[(c)]
 \verb|r[,3]|
\end{description}
\end{answer}

\begin{answer}{3}
\item[\special{html:<a href="ex-iii-vii">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-vii">}3.7\special {html:</a>}]
 \ %
\begin{verbatim}
   [][]CHAR months=
      ("January","February","March",
       "April","May","June",
       "July","August","September",
       "October","November","December")
\end{verbatim}
\item[\special{html:<a href="ex-iii-viii">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-viii">}3.8\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|30|
\item[(b)]
 \verb|(0.0,-5.4)|
\item[(c)]
 \verb|11.4|
\item[(d)]
 \verb|(6,7,8)|
\item[(e)]
 \verb|"pqrst"|
\end{description}
\end{answer}

\begin{answer}{3}
\item[\special{html:<a href="ex-iii-ix">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-ix">}3.9\special {html:</a>}]
 This exercise is self-marking,
but here is a program to print the answer to the first exercise:-
\begin{verbatim}
   PROGRAM ex3 2 1 CONTEXT VOID
   USE standard
   BEGIN
     [,]INT m = ((1,2,3,4),(5,6,7,8),
              (9,10,11,12),(13,14,15,16));

     print(("m[2,2]=",m[2,2],newline,
          "m[3,]=",m[3,],newline,
          "m[,2 UPB m]=",m[,2 UPB m],
          newline))
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{3}
\item[\special{html:<a href="ex-iii-x">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-x">}3.10\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|Man bites dog|
\item[(b)]
 \verb|bbbii|
\end{description}
\end{answer}

\begin{answer}{3}
\item[\special{html:<a href="ex-iii-xi">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-xi">}3.11\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex3 7 1 CONTEXT VOID
   USE standard
   BEGIN
      FOR num TO 25
      DO
         print((num^3,newline))
      OD
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-iii-xii">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-xii">}3.12\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex3 7 2 CONTEXT VOID
   USE standard
   BEGIN
      FOR c FROM ABS "Z" BY -1 TO ABS "A"
      DO
         print(REPR c)
      OD
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{3}
\item[\special{html:<a href="ex-iii-xiii">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-xiii">}3.13\special {html:</a>}]
 The main difficulty lies in computing the letter to print. The
first solution uses numbers and \verb|REPR|:-
\begin{verbatim}
   PROGRAM ex3 8 1a CONTEXT VOID
   USE standard
   BEGIN
      FOR row TO 5
      DO
         FOR letter TO 4
         DO
            print((REPR((row-1)*5
                     +letter+ABS"@"),",")
         OD;

         print((REPR(row*5 + ABS "@"),
                newline))
      OD
   END
   FINISH
\end{verbatim}
\noindent
The second solution uses an actual alphabet and a modified inner
loop. Note that the formul\ae{} in the \verb|FROM| and \verb|TO|
constructs are elaborated once only: before the inner loop is
elaborated for the first time in each elaboration of the outer loop:-
\begin{verbatim}
   PROGRAM ex3 8 1b CONTEXT VOID
   USE standard
   BEGIN
      []CHAR alphabet =
       "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[@1];

      FOR row TO 5
      DO
         INT row5 = row*5;

         FOR letter FROM row5-4 TO row5-1
         DO
            print((alphabet[letter],","))
         OD;

         print((alphabet[row5],newline))
      OD
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-iii-xiv">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-xiv">}3.14\special {html:</a>}]
 The most difficult part is in declaring the multiple.
\verb|print| will quite happily take the 3-dimensional multiple as
its parameter:
\begin{verbatim}
   PROGRAM ex3 8 2 CONTEXT VOID
   USE standard
   BEGIN
      [,,]REAL m=(((1e-7,1e-6),
                   (1e-5,1e-4)),
                  ((1e-3,1e-2),
                   (1e-1,1.0)));
      print(m)
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{3}
\item[\special{html:<a href="ex-iii-xv">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-xv">}3.15\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 The brackets for the
row-display should be replaced by parentheses.
\item[(b)]
 The number of
integers in each row should be the same.
\item[(c)]
 Nothing. The denotation
of an apostrophe is not doubled.
\end{description}
\item[\special{html:<a href="ex-iii-xvi">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-xvi">}3.16\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|[1:2,1:3]|
\item[(b)]
 \verb|[1:3]|
\item[(c)]
 \verb|[1:2]|
\end{description}
\item[\special{html:<a href="ex-iii-xvii">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-xvii">}3.17\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|(6,5,4)| \verb|[]INT|
\item[(b)]
 \verb|(8,5,2)| \verb|[]INT|
\item[(c)]
 \verb|(7,4)| \verb|[]INT|
\item[(d)]
 \verb|((6,5),(3,2))| \verb|[,]INT|
\end{description}
\item[\special{html:<a href="ex-iii-xviii">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-xviii">}3.18\special {html:</a>}]
 \verb|"abcabcabcdefg"|
\item[\special{html:<a href="ex-iii-xix">}Ex\special {html:</a>}
\special{html:<a name="ans-iii-xix">}3.19\special {html:</a>}]
 Notice the means of avoiding the use of
\verb|BY|:
\begin{verbatim}
   PROGRAM ex3 10 5 CONTEXT VOID
   USE standard
   BEGIN
      []CHAR alphabet =
            "abcdefghijklmnopqrstuvwxyz";
      []INT by = (1,6,11,16,21,26);

      FOR c BY --5 TO UPB alphabet
      DO
         print(alphabet[c])
      OD
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{4}
\item[\special{html:<a href="ex-iv-i">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-i">}4.1\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|0|
\item[(b)]
 \verb|4.4|
\item[(c)]
 \verb|FALSE|
\item[(d)]
 \verb|TRUE|
\item[(e)]
 \verb|TRUE|
\end{description}
\item[\special{html:<a href="ex-iv-ii">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-ii">}4.2\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|TRUE|
\item[(b)]
 \verb|TRUE|
\item[(c)]
 \verb|FALSE| (the
\verb|UPB t[2:]| is \verb|5|
\end{description}
\end{answer}

\begin{answer}{4}
\item[\special{html:<a href="ex-iv-iii">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-iii">}4.3\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|TRUE|
\item[(b)]
 \verb|TRUE|
\item[(c)]
 \verb|TRUE|
\item[(d)]
 \verb|TRUE|. It is inadvisable to created compuound
conditions with this sort of complexity simply because the condition
is so difficult to understand. You should particularly avoid compound
conditions with \verb|NOT| in front of the various parts.
\item[(e)]
 \verb|FALSE|
\end{description}
\item[\special{html:<a href="ex-iv-iv">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-iv">}4.4\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|TRUE|
\item[(b)]
 \verb|4 <= 2|
\item[(c)]
 \verb|a <= b OR b <= c|
\item[(d)]
 \verb|x /= y AND x /= z|
\end{description}
\end{answer}

\begin{answer}{4}
\item[\special{html:<a href="ex-iv-v">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-v">}4.5\special {html:</a>}]
 \ %
\begin{verbatim}
   IF x < pi
   THEN print("Yes")
   ELSE print("No")
   FI
\end{verbatim}
\item[\special{html:<a href="ex-iv-vi">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-vi">}4.6\special {html:</a>}]
 \ %
\begin{verbatim}
   FOR i TO 96
   DO
      print(i*3);

      IF i MOD 16 = 0
      THEN print(newline)
      FI
   OD
\end{verbatim}
\item[\special{html:<a href="ex-iv-vii">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-vii">}4.7\special {html:</a>}]
 The second operand of \verb|OREL| is only elaborated if
the first yields \verb|FALSE|.
\begin{verbatim}
   PROGRAM p CONTEXT VOID
   USE standard
   BEGIN
      INT a = 3, b = 5, c = 4;

      IF
         IF a > b
         THEN TRUE
         ELSE b > c
         FI
      THEN print("Ok")
      ELSE print("Wrong")
      FI
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{4}
\item[\special{html:<a href="ex-iv-viii">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-viii">}4.8\special {html:</a>}]
 The right-hand side of the identity declaration is
clearly an abbreviated case clause, so \verb|p| must yield
\verb|INT|, not \verb|BOOL|.
\item[\special{html:<a href="ex-iv-ix">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-ix">}4.9\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex4 6 2 CONTEXT VOID
   USE standard
   CASE SIGN x + 2
   IN
      print("x < 0.0"),
      print("x = 0.0"),
      print("x > 0.0")
   ESAC
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{4}
\item[\special{html:<a href="ex-iv-x">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-x">}4.10\special {html:</a>}]
 \verb|TRUE| and
\verb|FALSE|
\item[\special{html:<a href="ex-iv-xi">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-xi">}4.11\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|TRUE|
\item[(b)]
 \verb|TRUE|
\item[(c)]
 \verb|TRUE|
\item[(d)]
 \verb|FALSE|
\item[(e)]
 \verb|FALSE|
\item[(f)]
 \verb|FALSE|
\end{description}
\item[\special{html:<a href="ex-iv-xii">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-xii">}4.12\special {html:</a>}]
 You cannot mix full and abbreviated con\-di\-tional
clau\-ses.  Replace the vertical bar with \verb|THEN|. Also replace the
\verb|ESAC| with \verb|FI|.
\item[\special{html:<a href="ex-iv-xiii">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-xiii">}4.13\special {html:</a>}]
 \verb|TFTFTFTFTF|
\item[\special{html:<a href="ex-iv-xiv">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-xiv">}4.14\special {html:</a>}]
 \ %
\begin{verbatim}
   IF m < 10
   THEN print("Units")
   ELIF m < 100
   THEN print("Tens")
   ELIF m < 1000
   THEN print("Hundreds")
   ELSE print("Too big")
   FI
\end{verbatim}
\item[\special{html:<a href="ex-iv-xv">}Ex\special {html:</a>}
\special{html:<a name="ans-iv-xv">}4.15\special {html:</a>}]
 \ %
\begin{verbatim}
   print((card|"Ace","two","three",
               "four","five","six",
               "seven","eight","nine",
               "ten","Jack","Queen",
               "King"))
\end{verbatim}
\end{answer}

\begin{answer}{5}
\item[\special{html:<a href="ex-v-i">}Ex\special {html:</a>}
\special{html:<a name="ans-v-i">}5.1\special {html:</a>}]
 \verb|REF INT|
\item[\special{html:<a href="ex-v-ii">}Ex\special {html:</a>}
\special{html:<a name="ans-v-ii">}5.2\special {html:</a>}]
 \verb|REAL|
\item[\special{html:<a href="ex-v-iii">}Ex\special {html:</a>}
\special{html:<a name="ans-v-iii">}5.3\special {html:</a>}]
 The right-hand side of the identity declaration
should yield a value of mode \verb|INT|. Insert \verb|ENTIER| or
\verb|ROUND| before the \verb|r|.
\end{answer}

\begin{answer}{5}
\item[\special{html:<a href="ex-v-iv">}Ex\special {html:</a>}
\special{html:<a name="ans-v-iv">}5.4\special {html:</a>}]
 No value has been assigned to \verb|x| when the second
assignment is elaborated.
\item[\special{html:<a href="ex-v-v">}Ex\special {html:</a>}
\special{html:<a name="ans-v-v">}5.5\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 A name with mode \verb|REF REAL|.
\item[(b)]
 The real number denoted by \verb|2.5| with
mode \verb|REAL|.
\end{description}
\item[\special{html:<a href="ex-v-vi">}Ex\special {html:</a>}
\special{html:<a name="ans-v-vi">}5.6\special {html:</a>}]
 \verb|1.166666|$\ldots$
\end{answer}

\begin{answer}{5}
\item[\special{html:<a href="ex-v-vii">}Ex\special {html:</a>}
\special{html:<a name="ans-v-vii">}5.7\special {html:</a>}]
 A name with mode
\verb|REF[,]REAL|.
\item[\special{html:<a href="ex-v-viii">}Ex\special {html:</a>}
\special{html:<a name="ans-v-viii">}5.8\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 The
bounds of the slice on the left-hand side of the assignment are
\verb|[-2:0]|, but the bounds of \verb|n| are \verb|[1:3]|. The
assignment will cause a run-time error.
\item[(b)]
 You could write \verb|m[5,]:=m[,-1]|, but it
is unlikely that you would get what you wanted because the second
column overlaps the third row. Here is a solution guaranteed to work:-
\begin{verbatim}
   []INT temp = m[,-1];
   m[5,]:=temp[@-2]
\end{verbatim}
\end{description}
\item[\special{html:<a href="ex-v-ix">}Ex\special {html:</a>}
\special{html:<a name="ans-v-ix">}5.9\special {html:</a>}]
 There is no known formula
which will tell you how big the sieve must be to find the
\ith{365}{th} prime; you just have to guess. A sieve with \verb|size|
equal to 5000 suffices. You need a counter for the primes. The
complete program is:-
\begin{verbatim}
   PROGRAM sieve CONTEXT VOID
   USE standard
   BEGIN
      INT size=5000;
      REF[]BOOL flags = LOC[2:size]BOOL;

      FOR i FROM LWB flags TO UPB flags
      DO
         flags[i]:=TRUE
      OD;

      FOR i FROM LWB flags TO UPB flags
      DO
         IF flags[i]
         THEN
            FOR k FROM i*2 BY --i TO UPB flags
            DO
               flags[k]:=FALSE
               CO Remove multiples of i CO
            OD
         FI
      OD;

      REF INT count = LOC INT:=0;

      FOR i FROM LWB flags TO UPB flags
      DO
         IF flags[i] ANDTH (count+:=1)=365
         THEN print(i)
         FI
      OD
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{5}
\item[\special{html:<a href="ex-v-x">}Ex\special {html:</a>}
\special{html:<a name="ans-v-x">}5.10\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 A name of mode
\verb|REF FLEX[]CHAR|.
\item[(b)]
 1 and 5.
\end{description}
\end{answer}

\begin{answer}{5}
\item[\special{html:<a href="ex-v-xi">}Ex\special {html:</a>}
\special{html:<a name="ans-v-xi">}5.11\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex5 7 11 CONTEXT VOID
   USE standard
   BEGIN
      REF STRING ss = LOC STRING;
      FOR c FROM ABS "a" TO ABS "z"
      DO
         ss:="a"-REPR c;  print((ss,newline))
      OD
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-v-xii">}Ex\special {html:</a>}
\special{html:<a name="ans-v-xii">}5.12\special {html:</a>}]
 \ %
\begin{verbatim}
   REF FLEX[,]REAL f=
      LOC FLEX[1:0,1:0]REAL;
   f:=(5.0,10.0,15.0,20.0);
   print((1 LWB f,1 UPB f,
          2 LWB f,2 UPB f))
\end{verbatim}
\end{answer}

\begin{answer}{5}
\item[\special{html:<a href="ex-v-xiii">}Ex\special {html:</a>}
\special{html:<a name="ans-v-xiii">}5.13\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex5 8 1 CONTEXT VOID
   USE standard
   BEGIN
      REF REAL a = LOC REAL,
            b = LOC REAL;

      print(Enter two real numbers->");
      read((a,b,newline));
      print(("Their sum is",a+b,newline,
           "Their product is",a*b))
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-v-xiv">}Ex\special {html:</a>}
\special{html:<a name="ans-v-xiv">}5.14\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex5 8 2 CONTEXT VOID
   USE standard
   BEGIN
      REF STRING line = LOC STRING;

      DO
        read((line,newline));
        IF UPB line = 0
        THEN stop #terminate the program#
        ELSE
          FOR i
          FROM UPB line BY -1 TO LWB line
          DO
            print(line[i])
          OD;
          print(newline)
        FI
      OD
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{5}
\item[\special{html:<a href="ex-v-xv">}Ex\special {html:</a>}
\special{html:<a name="ans-v-xv">}5.15\special {html:</a>}]
 \ %
\begin{verbatim}
REF[]REAL r=
   LOC[(REF INT s=LOC INT; read(s); s)]REAL
\end{verbatim}
\item[\special{html:<a href="ex-v-xvi">}Ex\special {html:</a>}
\special{html:<a name="ans-v-xvi">}5.16\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex5 9 2 CONTEXT VOID
   USE standard
   BEGIN
      REF INT number=LOC INT;
      read(number);

      REF[]INT multiple=LOC[number]INT;
      read(multiple);
      REF INT sum=LOC INT:=0;

      FOR i TO number
      DO
        sum+:=multiple[i]
      OD;
      print(sum)
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{5}
\item[\special{html:<a href="ex-v-xvii">}Ex\special {html:</a>}
\special{html:<a name="ans-v-xvii">}5.17\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex5 10 1 CONTEXT VOID
   USE standard
   BEGIN
      REF INT neg = LOC INT:=0,
              pos = LOC INT:=0;

      WHILE
         REF INT i=LOC INT;
         read((i.newline));
         i /= 0
      DO
         (i < 0|neg|pos) +:= i
      OD;

      print(("Sum of negative integers =",
             neg,newline,
             "Sum of positive integers =",
             pos,newline))
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-v-xviii">}Ex\special {html:</a>}
\special{html:<a name="ans-v-xviii">}5.18\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex5 10 2 CONTEXT VOID
   USE standard
   BEGIN
      REF STRING line = LOC STRING;

      WHILE
         read((line,newline));
         UPB line /= 0
      DO
        REF INT v=LOC INT:=0;

        FOR i TO UPB line
        DO
          v+:=ABS line[i]*i
        OD;

        print((line,v,newline))
      OD
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{5}
\item[\special{html:<a href="ex-v-xix">}Ex\special {html:</a>}
\special{html:<a name="ans-v-xix">}5.19\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|[100]CHAR rc|
\item[(b)]
 \verb|FLEX[1:0]INT fi|
\item[(c)]
 \verb|BOOL b:=TRUE|
\end{description}
\item[\special{html:<a href="ex-v-xx">}Ex\special {html:</a>}
\special{html:<a name="ans-v-xx">}5.20\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|REF INT a=LOC INT, b=LOC INT, c=LOC INT|
\item[(b)]
 \verb|REF REAL x=LOC REAL;|\newline
\verb|REF[]CHAR y=LOC[5]CHAR;|\newline
\verb|REF[,]REAL z=LOC[3,3]REAL|
\item[(c)]
 \verb|REF FLEX[]CHAR s=LOC FLEX[1:0]CHAR|
\end{description}
\end{answer}

\begin{answer}{5}
\item[\special{html:<a href="ex-v-xxi">}Ex\special {html:</a>}
\special{html:<a name="ans-v-xxi">}5.21\special {html:</a>}]
 \verb|REF[]INT m=LOC[1000]INT;| \verb|[1000]INT m|
\item[\special{html:<a href="ex-v-xxii">}Ex\special {html:</a>}
\special{html:<a name="ans-v-xxii">}5.22\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex5 12 2 CONTEXT VOID
   USE standard
   BEGIN
      REAL sum:=0.0, salary, INT num:=0;

      WHILE read(salary);  salary /= -1.00
      DO
        sum+:=salary;  num+:=1
      OD;

      print(("Average salary=",sum/num))
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-v-xxiii">}Ex\special {html:</a>}
\special{html:<a name="ans-v-xxiii">}5.23\special {html:</a>}]
 When writing a program as involved as this, do not expect to get
it right first time. In practice, a programmer adds fine details to a
program after she has designed the main structure.
\hylabel{name-ex5-12-3}
\begin{verbatim}
   PROGRAM ex5 12 3 CONTEXT VOID
   USE standard
   BEGIN
      BOOL in word:=FALSE,
      STRING line;
      INT line start, line finish;
      INT word start, word finish;

      read((line,newline));
      line start:=LWB line;
      line finish:=UPB line;

      WHILE line[line start]=blank
                   &
            line start<=UPB line
      DO
        line start+:=1
      OD;

      WHILE line[line finish]=blank
                   &
            line finish>=line start
      DO
        line finish-:=1
      OD;

      line:=line[line start:line finish]
                       +blank;

      FOR c FROM LWB line
      WHILE c <= UPB line
      DO
        CHAR lc = line[c];

        IF   lc /= blank & NOT in word
        THEN word start:=c;  in word:=TRUE
        ELIF lc = blank & NOT in word
        THEN SKIP
        ELIF lc /= blank & in word
        THEN SKIP
        ELSE #lc = blank & in word#
          word finish:=c-1;
          in word:=FALSE;
          print((line[
                  word start:word finish],
                 newline))
        FI
      OD
   END
   FINISH
\end{verbatim}
\indent Notice that both \verb|word start| and \verb|word finish| are
made to refer to new values before being used. This is a good check
that you are writing the program properly. Notice also that the four
possible states of the compound condition on line 26 are carefully
spelled out on lines~28, 30 and~32.
\end{answer}

\begin{answer}{6}
\item[\special{html:<a href="ex-vi-i">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-i">}6.1\special {html:</a>}]
 An identity declaration is
\begin{verbatim}
<formal-mode-param> = <actual-mode-param>
\end{verbatim}
\item[\special{html:<a href="ex-vi-ii">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-ii">}6.2\special {html:</a>}]
 Because it is an identifier with a mode, but no
associated value.
\item[\special{html:<a href="ex-vi-iii">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-iii">}6.3\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|REAL|
\item[(b)]
 \verb|INT|
\item[(c)]
 Strong
\item[(d)]
 \verb|-5|
\end{description}
\item[\special{html:<a href="ex-vi-iv">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-iv">}6.4\special {html:</a>}]
 Using a loop:-
\begin{verbatim}
   ([]INT i)[]CHAR:
   (
      [LWB i:UPB i]CHAR s;

      FOR n FROM LWB i TO UPB i
      DO
      s[n]:=REPR ii
      OD;
      s
   )
\end{verbatim}
\end{answer}

\begin{answer}{6}
\item[\special{html:<a href="ex-vi-v">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-v">}6.5\special {html:</a>}]
 \verb|(REF REAL id)REAL:|
\item[\special{html:<a href="ex-vi-vi">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-vi">}6.6\special {html:</a>}]
 \verb|(REF CHAR a,b)REF CHAR:|
\item[\special{html:<a href="ex-vi-vii">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-vii">}6.7\special {html:</a>}]
 \ %
\begin{verbatim}
   (STRING s)[]STRING:
   BEGIN
      FLEX[1:0]STRING r:="";
         #rowing coercion#
      BOOL in word:=FALSE;
      INT st:=LWB s,fn:=UPB s;

      WHILE s[st]=blank & st<=UPB line
      DO
        st+:=1
      OD;

      WHILE s[fn]=blank & fn>=st
      DO
       fn-:=1
      OD;

      STRING ss:=s[st:fn]+blank;

      FOR c FROM LWB ss WHILE c <= UPB ss
      DO
         CHAR ssc=ss[c];

         IF   ssc/=blank & NOT in word
         THEN st:=c;  in word:=TRUE
         ELIF ssc=blank & NOT in word
         THEN SKIP
         ELIF ssc/=blank & in word
         THEN SKIP
         ELSE #ssc=blank & in word#
            fn:=c-1;  in word:=FALSE;
            [UPB r+1]STRING rr;
            rr[:UPB r]:=r;
            rr[UPB rr]:=ss[st:fn];
            r:=rr
        #The word has been added to r#
         FI
      OD;

      r[2:]  #Omit the null string#
   END
\end{verbatim}
\end{answer}

\begin{answer}{6}
\item[\special{html:<a href="ex-vi-viii">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-viii">}6.8\special {html:</a>}]
 \verb|REAL:|
\item[\special{html:<a href="ex-vi-ix">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-ix">}6.9\special {html:</a>}]
 \verb|VOID: print("Hi, there")|
\end{answer}

\begin{answer}{6}
\item[\special{html:<a href="ex-vi-x">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-x">}6.10\special {html:</a>}]
 This table summaries the occurrences:-
\begin{center}
\begin{tabular}{|r|l|c|}\hline
      &\multicolumn{2}{c|}{Occurrences}\\ \hline
Line  &Applied&Defining\\ \hline
 5    &\texttt{T p}&2\\
 5    &\texttt{T c}&3\\
 8    &\texttt{T 4}&2\\
 8    &\texttt{T q}&7\\
10    &\texttt{T REPR 2}&3\\
12    &\texttt{T c}&3\\
12    &\texttt{T q}&2\\ \hline
\end{tabular}
\end{center}
\item[\special{html:<a href="ex-vi-xi">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xi">}6.11\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 A name of mode \verb|REF INT|.
\item[(b)]
 The integer denoted by \verb|16| of
mode \verb|INT|.
\item[(c)]
 The integer nine of mode
\verb|INT|.
\item[(d)]
 The integer four of mode
\verb|INT|.
\end{description}
\item[\special{html:<a href="ex-vi-xii">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xii">}6.12\special {html:</a>}]
 The two declarations are firmly related because, in a
firm context, a name of mode \verb|REF[]INT| can be dereferenced to a
multiple of mode \verb|[]INT|.
\end{answer}

\begin{answer}{6}
\item[\special{html:<a href="ex-vi-xiii">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xiii">}6.13\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 1.
\item[(b)]
 1.
\item[(c)]
 2.
\item[(d)]
 2.
\end{description}
\end{answer}

\begin{answer}{6}
\item[\special{html:<a href="ex-vi-xiv">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xiv">}6.14\special {html:</a>}]
 These reasons are the
most important:-
\begin{enumerate}
\item Because their actions are not clear from the program code.
\item They can cause indeterminate states to occur.
\end{enumerate}
\item[\special{html:<a href="ex-vi-xv">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xv">}6.15\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 You cannot mix letters and symbols.
\item[(b)]
 The symbol should start with \verb|+| which
has already been declared as a monadic operator.
\item[(c)]
 This symbol is used for the identity
relation (see section \hyref{adv-idrel}) and is not an operator.
\end{description}
\item[\special{html:<a href="ex-vi-xvi">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xvi">}6.16\special {html:</a>}]
 \verb|OP PP = (REF INT a)REF INT:  a+:=1|
\end{answer}

\begin{answer}{6}
\item[\special{html:<a href="ex-vi-xvii">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xvii">}6.17\special {html:</a>}]
 \verb|PROC p = VOID:  a:=3|
\item[\special{html:<a href="ex-vi-xviii">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xviii">}6.18\special {html:</a>}]
 \ %
\begin{verbatim}
   PROC p = INT:
   BEGIN
      [(INT i; read((i,newline)); i)]INT a;
      read(a);
      INT sum:=0;

      FOR i TO UPB a DO sum+:=a[i] OD;
      sum
   END
\end{verbatim}
\item[\special{html:<a href="ex-vi-xix">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xix">}6.19\special {html:</a>}]
 \ %
\begin{verbatim}
   PROC p = REF[,]CHAR:
   (
      HEAP[3,20]CHAR n;
      read((n,newline));
      n
   )
\end{verbatim}
\end{answer}

\begin{answer}{6}
\item[\special{html:<a href="ex-vi-xx">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xx">}6.20\special {html:</a>}]
 \ %
\begin{verbatim}
   PROC p=(REF REAL r)REF REAL:
      r:=r/pi*180
\end{verbatim}
\item[\special{html:<a href="ex-vi-xxi">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xxi">}6.21\special {html:</a>}]
 \ %
\begin{verbatim}
   PROC p = (STRING s,INT i)VOID:
   (
      INT ii = IF i < 0
               THEN print(newline); ABS i
               ELSE i
               FI;
      TO ii DO print(s) OD
   )
\end{verbatim}
\item[\special{html:<a href="ex-vi-xxii">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xxii">}6.22\special {html:</a>}]
 \ %
\begin{verbatim}
   PROC num in multiple=(INT i,
                         []INT m,
                         REF INT p)BOOL:
   (
      INT pos:=LWB m - 1;

      FOR j FROM LWB m TO UPB m
      WHILE pos < LWB m
      DO
         (i=m[j]|pos:=j)
      OD;

      IF pos < LWB m
      THEN FALSE
      ELSE p:=pos; TRUE
      FI
   )
\end{verbatim}
\end{answer}

\begin{answer}{6}
\item[\special{html:<a href="ex-vi-xxiii">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xxiii">}6.23\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|10.0|
\item[(b)]
 \verb|0.3|
\item[(c)]

\verb|0.0|.
\end{description}
\end{answer}

\begin{answer}{6}
\item[\special{html:<a href="ex-vi-xxiv">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xxiv">}6.24\special {html:</a>}]
 \ %
\begin{verbatim}
   PROC reverse = ([]CHAR s)[]CHAR:
   (SIZE s=1|s|s[UPB s]+reverse(s[:UPB s-1]))
\end{verbatim}
\item[\special{html:<a href="ex-vi-xxv">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xxv">}6.25\special {html:</a>}]
 \ %
\begin{verbatim}
   PROC(INT)INT cube;

   PROC square=(INT p)INT:
      (ODD p|cube(p)|p^2);
   cube:=(INT p)INT: (ODD p|p^3|square(p))
\end{verbatim}
\noindent
\end{answer}

\begin{answer}{6}
\item[\special{html:<a href="ex-vi-xxvi">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xxvi">}6.26\special {html:</a>}]
 They form the two sides of an identity declaration.
\item[\special{html:<a href="ex-vi-xxvii">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xxvii">}6.27\special {html:</a>}]
 \ %
\begin{verbatim}
   OP LARGEST = ([,]REAL a)REAL:
   (
      REAL largest:=a[1 LWB a,2 LWB a];

      FOR i FROM 1 LWB a TO 1 UPB a
      DO
         FOR j FROM 2 LWB a TO 2 UPB a
         DO
            largest:=largest MAX a[i,j]
         OD
      OD;
      largest
   )
\end{verbatim}
\item[\special{html:<a href="ex-vi-xxviii">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xxviii">}6.28\special {html:</a>}]
 \ %
\begin{verbatim}
   PROC pr = (INT n)REF[]INT: HEAP[n]INT
\end{verbatim}
\item[\special{html:<a href="ex-vi-xxix">}Ex\special {html:</a>}
\special{html:<a name="ans-vi-xxix">}6.29\special {html:</a>}]
 \ %
\begin{verbatim}
   PROC leng = INT:
   (STRING s;
    read((s,newline));
    UPB s)
\end{verbatim}
\end{answer}

\begin{answer}{7}
\item[\special{html:<a href="ex-vii-i">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-i">}7.1\special {html:</a>}]
 \verb|STRUCT(INT i,j,k) s1 = (1,2,3)|
\item[\special{html:<a href="ex-vii-ii">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-ii">}7.2\special {html:</a>}]
 \verb|STRUCT(INT i,REAL r,BOOL b)s2|
\end{answer}

\begin{answer}{7}
\item[\special{html:<a href="ex-vii-iii">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-iii">}7.3\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|REF STRUCT(CHAR a,INT b)|
\item[(b)]
 \verb|REF CHAR|
\item[(c)]
 \verb|REF CHAR|
\item[(d)]
 \verb|INT|, provided that a
procedure had been assigned to \verb|p OF st|.
\item[(e)]
 \verb|INT|
\item[(f)]
 \verb|REF STRUCT(CHAR a,INT b)|
\end{description}
\item[\special{html:<a href="ex-vii-iv">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-iv">}7.4\special {html:</a>}]
 \ %
\begin{verbatim}
   PROC p1=(STRUCT(CHAR a,INT b)s)INT:
      ABS a OF s * b OF s
\end{verbatim}
\end{answer}

\begin{answer}{7}
\item[\special{html:<a href="ex-vii-v">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-v">}7.5\special {html:</a>}]
 \ %
\begin{verbatim}
   MODE EX_7_3_1=STRUCT(REAL r,
                        PROC(REAL)REAL p)
\end{verbatim}
\item[\special{html:<a href="ex-vii-vi">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-vi">}7.6\special {html:</a>}]
 \ %
\begin{verbatim}
   MODE EX_7_3_2=
      STRUCT(EX_7_3_1 e,
             PROC(EX_7_3_1)VOID p,
             CHAR c)
\end{verbatim}
\item[\special{html:<a href="ex-vii-vii">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-vii">}7.7\special {html:</a>}]
 One of the \verb|BMODE| and \verb|AMODE|
structures is insufficiently shielded. You will get an error for
\verb|BMODE| saying it is not a legal mode and another error for the
declaration of a \verb|REF AMODE| saying that the mode \verb|AMODE|
has not been declared.
\end{answer}

\begin{answer}{7}
\item[\special{html:<a href="ex-vii-viii">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-viii">}7.8\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|(2.0,3.0)|
\item[(b)]
 \verb|-12.0|
\item[(c)]
 Write a short program to get
\begin{verbatim}
   3.6055512754639891
\end{verbatim}
\item[(d)]
 \verb|0.982 793 723 247 329 1|
\end{description}
\item[\special{html:<a href="ex-vii-ix">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-ix">}7.9\special {html:</a>}]
 The value denoted by \verb|(12.0,-10.0)|.
\item[\special{html:<a href="ex-vii-x">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-x">}7.10\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|REF REAL|, a name.
\item[(b)]
 \verb|REAL  -3.0|
\item[(c)]
 \verb|REAL  3.0|
\item[(d)]
 \verb|REAL  3.0|
\end{description}
\end{answer}

\begin{answer}{7}
\item[\special{html:<a href="ex-vii-xi">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-xi">}7.11\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|REF[]STRING|
\item[(b)]
 \verb|REF REAL|
\item[(c)]
 \verb|REF REAL|
\item[(d)]
 \verb|REF[]REAL|
\end{description}
\item[\special{html:<a href="ex-vii-xii">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-xii">}7.12\special {html:</a>}]
 \verb|[1:3]|.
\end{answer}

\begin{answer}{7}
\item[\special{html:<a href="ex-vii-xiii">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-xiii">}7.13\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|REF CHAR|
\item[(b)]
 \verb|REF[]STRING|
\item[(c)]
 \verb|REF STRING|
\item[(d)]
 \verb|REF[]REAL|
\item[(e)]
 \verb|REF[]REAL|
\end{description}
\end{answer}

\begin{answer}{7}
\item[\special{html:<a href="ex-vii-xiv">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-xiv">}7.14\special {html:</a>}]
 \ %
\begin{verbatim}
   MODE TEAM=STRUCT([11]STRING name,
                    STRING team,
                    INT played, won, drawn,
                        for, against)
\end{verbatim}
\item[\special{html:<a href="ex-vii-xv">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-xv">}7.15\special {html:</a>}]
 Slicing binds more tightly than selecting, so the
selection must be enclosed in parentheses (see section
\hyref{gram-paren} for the full explanation).
\item[\special{html:<a href="ex-vii-xvi">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-xvi">}7.16\special {html:</a>}]
 The slicing takes place before the selection
so no parentheses are needed.
\item[\special{html:<a href="ex-vii-xvii">}Ex\special {html:</a>}
\special{html:<a name="ans-vii-xvii">}7.17\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|REF PROC S2|
\item[(b)]
 \verb|REF PROC(S1)S2|
\item[(c)]
 \verb|REF[]CHAR|
\end{description}
\end{answer}

\begin{answer}{8}
\item[\special{html:<a href="ex-viii-i">}Ex\special {html:</a>}
\special{html:<a name="ans-viii-i">}8.1\special {html:</a>}]
 \verb|MODE BINT = UNION(BOOL,INT)|
\item[\special{html:<a href="ex-viii-ii">}Ex\special {html:</a>}
\special{html:<a name="ans-viii-ii">}8.2\special {html:</a>}]
 \verb|BINT b = TRUE|
\item[\special{html:<a href="ex-viii-iii">}Ex\special {html:</a>}
\special{html:<a name="ans-viii-iii">}8.3\special {html:</a>}]
 One of the constituent modes of the union is
firmly-related to the united mode. In other words, in a firm context,
\verb|REF UB| can be dereferenced to \verb|UB|.
\item[\special{html:<a href="ex-viii-iv">}Ex\special {html:</a>}
\special{html:<a name="ans-viii-iv">}8.4\special {html:</a>}]
 \verb|UNION(INT,[]INT,[,]INT) mint|
\end{answer}

\begin{answer}{8}
\item[\special{html:<a href="ex-viii-v">}Ex\special {html:</a>}
\special{html:<a name="ans-viii-v">}8.5\special {html:</a>}]
 The first parameter is deprocedured to mode \verb|CHAR|
before being united.  The second is dereferenced to mode
\verb|[]CHAR| and then united.  The two values of the united mode are
regarded as a row-display and the procedure is then called.  The
second parameter is an example of an anonymous name---no identifier
is attached.
\item[\special{html:<a href="ex-viii-vi">}Ex\special {html:</a>}
\special{html:<a name="ans-viii-vi">}8.6\special {html:</a>}]
 \ %
\begin{verbatim}
   PROC ucis=(CHAR ch,[]CHAR s)
                  UNION(INT,VOID):

   IF   INT p = ch FIND s;  p >= LWB s
   THEN p
   ELSE EMPTY
   FI
\end{verbatim}
\end{answer}

\begin{answer}{8}
\item[\special{html:<a href="ex-viii-vii">}Ex\special {html:</a>}
\special{html:<a name="ans-viii-vii">}8.7\special {html:</a>}]
 \ %
\begin{verbatim}
   PROC p = (MIRC m)IRC:
   CASE m IN
      ([]INT i): (INT sum:=0;
                  FOR j FROM LWB i TO UPB i
                  DO sum+:=i[j] OD;
                  sum),
      ([]REAL r):(REAL sum:=0;
                  FOR j FROM LWB r TO UPB r
                  DO sum+:=r[j] OD;
                  sum),
      ([]COMPL c):(COMPL sum:=0;
                  FOR j FROM LWB c TO UPB c
                  DO sum+:=c[j] OD;
                  sum)
   ESAC
\end{verbatim}
\item[\special{html:<a href="ex-viii-viii">}Ex\special {html:</a>}
\special{html:<a name="ans-viii-viii">}8.8\special {html:</a>}]
 \ %
\begin{verbatim}
   OP * = (IRC a,b)IRC:
   CASE a IN
      (INT i):  CASE b IN
                   (INT j):   i*j,
                   (REAL j):  i*j,
                   (COMPL j): i*j
                ESAC,
      (REAL i): CASE b IN
                   (INT j):   i*j,
                   (REAL j):  i*j,
                   (COMPL j): i*j
                ESAC,
      (COMPL i):CASE b IN
                   (INT j):   i*j,
                   (REAL j):  i*j,
                   (COMPL j): i*j
                ESAC
   ESAC
\end{verbatim}
\end{answer}

\begin{answer}{8}
\item[\special{html:<a href="ex-viii-ix">}Ex\special {html:</a>}
\special{html:<a name="ans-viii-ix">}8.9\special {html:</a>}]
 \verb|MODE CRIB = UNION(CHAR,REAL,INT,BOOL)|
\item[\special{html:<a href="ex-viii-x">}Ex\special {html:</a>}
\special{html:<a name="ans-viii-x">}8.10\special {html:</a>}]
 \ %
\begin{verbatim}
   OP UABS = (CRIB c)UNION(INT,REAL):
   CASE c IN
      (CHAR a):   ABS a,
      (REAL a):   ABS a,
      (INT a):    ABS a,
      (BOOL a):   ABS a
   ESAC
\end{verbatim}
\item[\special{html:<a href="ex-viii-xi">}Ex\special {html:</a>}
\special{html:<a name="ans-viii-xi">}8.11\special {html:</a>}]
 \verb|UABS "c"; UABS -4.0; UABS -3; UABS TRUE|
\end{answer}

\begin{answer}{9}
\item[\special{html:<a href="ex-ix-i">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-i">}9.1\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM list CONTEXT VOID
   USE standard
   BEGIN
      FILE f;
      IF   open(f,
                "textbook",
                stand in channel)/=0
      THEN
         print("Cannot open textbook");
         exit(1)
      FI;

      STRING s;
      WHILE get(f,(s,newline));  UPB s /= 0
      DO
         print((s,newline))
      OD;

      close(f)
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-ix-ii">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-ii">}9.2\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex9 2 2 CONTEXT VOID
   USE standard
   BEGIN
      FILE f;

      IF   open(f,
                "textbook",
                stand in channel)/=0
      THEN
         print("Cannot open textbook");
         exit(1)
      FI;

      REAL r, sum:=0, INT n;  get(f,n);

      TO n DO get(f,r); sum+:=r OD;
      print(sum);  close(f)
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{9}
\item[\special{html:<a href="ex-ix-iii">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-iii">}9.3\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex9 3 1 CONTEXT VOID
   USE standard
   BEGIN
      FILE inf,outf;

      IF   open(inf,
                "textbook",
                stand in channel)/=0
      THEN
         print("cannot open textbook");
         exit(1)
      ELIF establish(outf,
                     "result",
                     stand out channel,
                     0,0,0)/=0
      THEN
         print("Cannot create result");
         exit(2)
      FI;

      REAL sum:=0, r, INT n;

      get(inf,n);
      TO n
      DO
         get(inf,r);  sum+:=r
      OD;
      put(outf,sum);
      close(inf);  close(outf)
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-ix-iv">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-iv">}9.4\special {html:</a>}]
 Note that in this answer, you will have to find
some means of obviating the \hx{a68toc}{a68toc!BY@\texttt{BY}} bug
for the \verb|BY| construct.
\begin{verbatim}
   PROGRAM ex9 3 2 CONTEXT VOID
   USE standard
   BEGIN
      INT size = 10 000;
      [2:size]BOOL flags;

      FOR i
      FROM LWB flags TO UPB flags
      DO flags[i]:=TRUE OD;

      FOR i
      FROM LWB flags TO UPB flags
      DO
         IF flags[i]
         THEN
            FOR k
            FROM i+i BY --i TO UPB flags
            DO
               flags[k]:=FALSE
            OD
         FI
      OD;

      #Now the file is needed#
      FILE f;
      IF   establish(f,
                     "primes",
                      stand out channel,
                      0,0,0)/=0
      THEN
         print("Cannot create primes");
         exit(1)
      FI;

      FOR i FROM LWB flags TO UPB flags
      DO
         IF flags[i]
         THEN put(f,(i,newline))
         FI
      OD;

      close(f)
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{9}
\item[\special{html:<a href="ex-ix-v">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-v">}9.5\special {html:</a>}]
 Notice that the
processing of a line is done entirely within the \verb|WHILE| clause.
\begin{verbatim}
   PROGRAM ex9 5 CONTEXT VOID
   USE standard
   BEGIN
      FILE inf, outf;

      IF   open(inf,
                "inbook",
                stand in channel)/=0
      THEN
         print("Cannot open inbook");
         exit(1)
      ELIF establish(outf,
                     "outbook",
                     stand out channel,
                     0,0,0)/=0
      THEN
         print("Cannot create outbook");
         exit(2)
      FI;

      STRING line;

      WHILE
         get(inf,(line,newline));
         put(outf,(line,newline));
         IF UPB line = 0
         THEN FALSE
         ELSE line /= UPB line * blank
         FI
      DO SKIP OD;

      close(inf);  close(outf)
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-ix-vi">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-vi">}9.6\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex9 6 CONTEXT VOID
   USE transput
   BEGIN
      FILE inf, outf;

      IF   open(inf,
                "lines",
                stand in channel)/=0
      THEN
         print("Cannot open book lines");
         exit(1)
      ELIF establish(outf,
                     "words",
                     stand out channel,
                     0,0,0)/=0
      THEN
         print("Cannot create book words");
         exit(2)
      FI;

      []CHAR terminators=" *"+cr+lf;
      make term(inf,terminators);

      STRING word, CHAR ch:=blank;

      WHILE
         get(inf,word);
         IF ch/=blank
         THEN ch PLUSTO word
         FI;

         WHILE
            get(inf,ch);
         CO String terminator,
            but cr/lf ignored CO
            ch = blank
         DO SKIP OD;  #Skip spaces#
         put(outf,(word,newline));
         ch /= "*"
      DO SKIP OD;

      close(inf);  close(outf)
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{9}
\item[\special{html:<a href="ex-ix-vii">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-vii">}9.7\special {html:</a>}]
 If the
\verb|on logical file end| procedure yields\newline
\verb|FALSE|, the standard prelude causes an error message to be
displayed and the program itself exits with an equivalent error
number. Here is the code for the program:-
\begin{verbatim}
   PROGRAM tt CONTEXT VOID
   USE standard
   IF FILE inf;
      STRING line;  INT n,sum:=0;
      open(inf,
           "inbook",
            stand in channel)/=0
   THEN
      print(("Cannot open inbook",
             newline));
      exit(1)
   ELSE
      on logical file end(inf,
       (REF FILE f)BOOL:
         IF FILE ouf;
            establish(ouf,
                      "outbook",
                      stand out channel,
                      0,0,0)/=0
         THEN
            print(("Cannot establish ",
                   "outbook",newline));
            exit(2); SKIP
         ELSE
            put(ouf,(sum/n,newline));
            close(ouf);  FALSE
         FI);

      FOR i
      DO
         get(inf,(line,newline));
         n:=i;  sum+:=UPB line
      OD
   FI
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{9}
\item[\special{html:<a href="ex-ix-viii">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-viii">}9.8\special {html:</a>}]
 In the following solution, note how
\texttt{skip} \texttt{term\-in\-ators} is called immediately after
reading the first argument (the full path of the program):-
\begin{verbatim}
   PROGRAM ex9 6 1 CONTEXT VOID
   USE standard
   IF FILE arg, inf, ouf;
      STRING line, infn, oufn;
      INT n,sum:=0;

      open(arg,"",arg channel)/=0
   THEN
      put(stand error,
          ("Cannot access the ",
           "program arguments",
           newline));
        exit(1)
   ELIF
      on logical file end(arg,
       (REF FILE f)BOOL:
        (put(stand error,
             ("Insufficient arguments",
              newline));
         stop;  SKIP));
      get(arg,(LOC STRING,skip terminators,
               infn,skip terminators,
                oufn));
      open(inf,infn,stand in channel)/=0
   THEN
      print(("Cannot open ",infn,newline));
      exit(2)
   ELSE
      on logical file end(inf,
       (REF FILE f)BOOL:
        IF establish(ouf,
                     oufn,
                     stand out channel,
                     0,0,0)/=0
        THEN
           print(("Cannot establish ",
                  oufn,
                  newline));
           exit(3); SKIP
        ELSE
           put(ouf,("Average=",sum/n,
                    newline));
           close(ouf);
           FALSE
        FI);

      FOR i
      DO
         get(inf,(line,newline));
         n:=i;  sum+:=UPB line
      OD
   FI
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-ix-ix">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-ix">}9.9\special {html:</a>}]
 Notice that the physical file end of the output file has also
been covered:-
\begin{verbatim}
   PROGRAM ex9 6 2 CONTEXT VOID
   USE standard
   IF FILE arg, inf, ouf;
      STRING line, infn, oufn;
      open(arg,"",arg channel)/=0
   THEN
      put(stand error,
          ("Cannot access the arguments",
           newline));
      exit(1)
   ELIF
      on logical file end(arg,
       (REF FILE f)BOOL:
        (put(stand error,
             ("Insufficient arguments",
              newline));  stop;  SKIP));
      get(arg,(LOC STRING,
               skip terminators,
               infn,skip terminators,
               oufn));
      open(inf,infn,stand in channel)/=0
   THEN
      print(("Cannot open ",infn,newline));
      exit(2)
   ELIF
      establish(ouf,
                oufn,
                stand out channel,
                0,0,0)/=0
   THEN
      print(("Cannot establish ",oufn,
             newline));
             exit(3)
   ELSE
      on logical file end(inf,
       (REF FILE f)BOOL:
        (close(ouf);  close(inf);
         stop;  SKIP));
      on physical file end(ouf,
       (REF FILE f)BOOL:
        (put(stand error,
             ("Write error on ",idf(ouf),
              newline));
         exit(4); SKIP));
      DO
         get(inf,(line,newline));
         FOR i FROM LWB line TO UPB line
         DO
            REF CHAR li=line[i];
            IF li=blank THEN li:="*" FI
         OD;
         put(ouf,(line,newline))
      OD
   FI
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{9}
\item[\special{html:<a href="ex-ix-x">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-x">}9.10\special {html:</a>}]
 \ %
\begin{verbatim}
    PROGRAM ex9 7 1 CONTEXT VOID
    USE standard
    IF FILE env;
       open(env,"PATH",env channel)=0
    THEN
       on logical file end(env,
        (REF FILE e)BOOL: (stop; SKIP));
       make term(env,":"+nul ch);
       STRING s;
       DO
          get(env,s);
          IF UPB s >= LWB s
          THEN print((s,newline))
          FI;
          skip delimiters(env)
       OD;
       close(env)
    FI
    FINISH
\end{verbatim}
\item[\special{html:<a href="ex-ix-xi">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-xi">}9.11\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex9 7 2 CONTEXT VOID
   USE standard
   IF FILE arg;
      open(arg,"",arg channel)/=0
   THEN
      put(stand error,
          ("Cannot access arguments",
           newline));
      exit(1)
   ELSE
      on logical file end(arg,
       (REF FILE a)BOOL: (stop;  SKIP));
      get(arg,(LOC STRING,
               LOC CHAR,
               skip terminators));
      DO
         make term(arg,"/");
         STRING env name;
         CHAR terminator:=nul ch;
         get(arg,
             (env name,
              skip terminators,
              terminator));
         IF FILE env;
            open(env,
                 env name,
                 env channel)/=0
         THEN
            print((env name," undefined",
                   newline))
         ELSE
            make term(env,
                      terminator+nul ch);
            STRING s;
            on logical file end(
               env,
               (REF FILE f)BOOL:
                 (GOTO continue; SKIP));
            DO
               get(env,s);
               IF UPB s >= LWB s
               THEN print((s,newline))
               FI;
               skip terminators(env)
            OD;
            continue:
            close(env)
         FI;
         make term(arg,blank);
         skip terminators(arg)
      OD
   FI
   FINISH
\end{verbatim}
\noindent
Notice the addition of \verb|nul ch| to cater for the lack of a
specific terminator in the environment string.
\item[\special{html:<a href="ex-ix-xii">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-xii">}9.12\special {html:</a>}]
 \ %
\begin{verbatim}
    PROGRAM ex9 7 3 CONTEXT VOID
    USE standard
    IF FILE abc;
        open(abc,"ABC",env channel)/=0
    THEN
        print(("Environment string ABC",
              "is undefined",newline));
        stop
    ELSE
        INT sum:=0, n;
        on logical file end(
         abc,
         (REF FILE f)BOOL:
          (close(f);
           print(("Total=",sum,newline));
           stop;  SKIP));
       DO
          get(abc,n);
          sum+:=n
       OD
    FI
    FINISH
\end{verbatim}
\end{answer}

\begin{answer}{9}
\item[\special{html:<a href="ex-ix-xiii">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-xiii">}9.13\special {html:</a>}]
 Notice how the size of the month denotation is used to
ensure that the rainfall is aligned appropriately.
\begin{verbatim}
   PROGRAM ex9 8 1 CONTEXT VOID
   USE standard
   BEGIN
   []STRING months=
       ("January","February","March",
        "April","May","June","July",
        "August","September",
        "October","November",
        "December");

   []REAL rainfall=
       ( 6.54, 12.3,  10.1,  13.83,
         5.04, 9.15,  14.34, 16.38,
         13.84, 10.45, 8.49, 7.57);

   FOR m TO UPB months
   DO
      STRING mm=months[m];
      print((mm,(12-UPB mm)*blank,
             fixed(rainfall[m],-5,2),
             newline))
   OD
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-ix-xiv">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-xiv">}9.14\special {html:</a>}]
 The difficult part is calculating which
number to print at each position.
\begin{verbatim}
   PROGRAM ex9 8 2 CONTEXT VOID
   USE standard
   BEGIN
      print(("Table of square roots ",
             "1 to 100",
             newline,newline));

      FOR i TO 25
      DO
         FOR j TO 4
         DO
            INT number = (j-1)*25+i;
            print((whole(number,-6),
                   fixed(sqrt(number),
                         -8,4)))
         OD;
         print(newline)
      OD
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-ix-xv">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-xv">}9.15\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex9 8 3 CONTEXT VOID
   USE standard
   BEGIN
      REAL pi power:=1;
      print(("Table of powers of pi",
             " 1 to 10",
           newline,newline));

      FOR i TO 10
      DO
        pi power*:=pi;
        print((whole(i,-3),"  ",
               float(pi power,
                     12,6,2),
               newline))
      OD
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{9}
\item[\special{html:<a href="ex-ix-xvi">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-xvi">}9.16\special {html:</a>}]
 To write this
program, you need to know how many bytes Algol 68 uses to store an
integer in a binary book. In the program below, that number is
presumed to be identified by \verb|int bin bytes|. You will need to
write a short program to output a couple of integers to a binary book
and then see how long it is (and you might find its contents of
interest).
\begin{verbatim}
   PROGRAM ex9 9 1 CONTEXT VOID
   USE standard
   BEGIN
   FILE work;

   IF   establish(work,
                  "ex9 9 1.tmp",
                  stand back channel,
                  0,0,0)/=0
   THEN
      print("Cannot create workbook");
      exit(1)
   FI;

   FOR i TO 1000 DO put bin(work,i) OD;

   INT int bin bytes=?;
   CO Your value replaces ? CO

   FOR i FROM 17 BY --17 TO 1000
   DO
      set(work,0,0,(i-1)*int bin bytes);
      INT n;  get bin(work,n);
      print((n,newline))
   OD;

   close(work)
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-ix-xvii">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-xvii">}9.17\special {html:</a>}]
 Reading the words should
not present any problems to you. The only new bit is the output.
However, for the sake of completeness, here is the whole program.
\begin{verbatim}
   PROGRAM ex9 9 2 CONTEXT VOID
   USE standard
   BEGIN
      FILE inf, out1, out2;

      IF open(inf,
              "inbook",
              stand in channel)/=0
      THEN
         print("Cannot open inbook");
         exit(1)
      ELIF establish(out1,
                     "outbook1",
                     stand out channel,
                     0,0,0)/=0
      THEN
         print("Cannot create outbook1");
         exit(2)
      ELIF establish(out2,
                     "outbook2",
                     stand out channel,
                     0,0,0)/=0
      THEN
         print("Cannot create outbook2");
         exit(3)
      FI;

      make term(inf, blank+cr+lf);

      STRING word; CHAR ch:=blank;

      on logical file end(inf,
       (REF FILE f)BOOL:
        (close(out1);
         close(out2);
         close(f);
         stop;  SKIP));

      DO
         get(inf,(word,
                  skip terminators));

         IF UPB word > 0
         THEN
            put bin(out2,
                    (current pos(out1),
                     UPB word));
            put bin(out1,word)
         FI
      OD
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{9}
\item[\special{html:<a href="ex-ix-xviii">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-xviii">}9.18\special {html:</a>}]
 A
useful wrinkle is to end your report with the words
\verb|END OF REPORT| so that your reader knows that there are no
pages of the report which could have been lost. In a professionally
written program, you would put a page number and the date of the
report, but we have not yet covered how that can be done (see
chapter~12).
\begin{verbatim}
   PROGRAM ex9 11 1 CONTEXT VOID
   USE standard
   IF []STRING
        months =
         ("January","February","March",
          "April","May","June",
          "July","August","September",
          "October","November","December");
      []REAL
        rainfall =
         ( 6.54, 12.30, 10.10, 13,83,
           5.04,  9.15, 14.34, 16.38,
          13.84, 10.45, 8.49,   7.57);
      FILE prn;
      establish(prn,
                "rainfall.out",
                stand out channel,
                0,0,0)/=0
   THEN
      put(stand error,
          ("Cannot establish rainfall.out",
           newline));  stop
   ELSE
      put(prn,
          ("Rainfall figures in 1995",
           newline,newline,
           "Month",7*blank,
           "Rainfall in mm",
           newline));

      FOR m TO UPB months
      DO
        STRING mm = months[m];
        put(prn,
            (mm,(12-UPB mm)*blank,
             fixed(rainfall[m],-5,2),
             newline))
      OD;
      put(prn,
          (newline,
           "END OF REPORT",
           newline));
      close(prn)
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-ix-xix">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-xix">}9.19\special {html:</a>}]
 You will need to get the
identification of the file from the argument line.
\begin{verbatim}
   PROGRAM ex9 11 2 CONTEXT VOID
   USE standard
   IF STRING in idf;  FILE arg, inf, prn;
      open(arg,"",arg channel)/=0
   THEN
      put(stand error,
          ("Cannot access arguments",
           newline));
      exit(1)
   ELIF
      on logical file end(arg,
       (REF FILE f)BOOL:
        (put(stand error,
             ("Usage: tt idf",
              newline));
         stop;  SKIP));
      get(arg,(LOC STRING,skip terminators,
               in idf));
      close(arg);
      open(inf,in idf,stand in channel)/=0
   THEN
       put(stand error,
           ("Cannot open ",in idf,
            newline));
      exit(2)
   ELIF
      establish(prn,"tt.out",
                stand out channel,
                0,0,0)/=0
   THEN
      put(stand error,
          ("Cannot establish tt.out",
           newline));
      exit(3)
   ELSE
      STRING line;
      on logical file end(inf,
       (REF FILE f)BOOL:
        (close(f);  close(prn);
         stop;  SKIP));

      FOR i
      DO
         get(inf,(line,newline));
         put(prn,(whole(i,-6),": "));
         IF UPB line > 0
         THEN put(prn,line)
         FI;
         newline(prn)
      OD
   FI
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{9}
\item[\special{html:<a href="ex-ix-xx">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-xx">}9.20\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex9 12 1 CONTEXT VOID
   USE standard
   BEGIN
      REAL r;

      WHILE read(r); r/=0.0
      DO
         print((float(r,-12,3,-2),newline))
      OD
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-ix-xxi">}Ex\special {html:</a>}
\special{html:<a name="ans-ix-xxi">}9.21\special {html:</a>}]
 This program is not
all that difficult. Take it slowly, step by step.  Although reading
an employee record only appears once in the program, it is better to
write it as a procedure so as not to obscure the main logic.
Likewise, printing each line of the report is also declared as a
procedure. Notice how the given solution checks for errors.
\begin{verbatim}
   PROGRAM ex9 12 2 CONTEXT VOID
   USE standard
   BEGIN
      FILE arg, emp, prn;
      STRING emp idf;
      INT week:=0;

      IF open(arg,"",arg channel)/=0
      THEN
        put(stand error,
           ("Cannot access the arguments",
            newline));
        exit(1)
      ELIF
        on logical file end(arg,
         (REF FILE f)BOOL:
         (put(stand error,
             ("Usage: tt emp-book week-no",
              newline));
          exit(2); SKIP));
        get(arg,
           (LOC STRING,LOC CHAR,
            emp idf,week));
        week < 1 OR week > 53
      THEN
         put(stand error,
             ("Invalid week number",
              newline));
         exit(3)
      ELIF open(emp,
                emp idf,
                stand in channel)/=0
      THEN
        put(stand error,
           ("Cannot open ",emp idf,
            newline));
        exit(4)
      ELIF
        establish(prn,
                  "report",
                  stand out channel,
                  0,0,0)/=0
      THEN
        put(stand error,
           ("Cannot establish report",
            newline));
        exit(5)
      FI;

      MODE
        EMPLOYEE=STRUCT(STRING name,
                        [2]STRING address,
                        STRING dept,
                               ni code,
                               tax code,
                        REAL basic,
                             overtime,
                        [52]REAL
                           net pay,tax);

      PROC get emp=(REF FILE f,
                    REF EMPLOYEE e)VOID:
      BEGIN
        [80]CHAR s;

        PROC get str=[]CHAR:
        (
           INT len;  get bin(f,len);
           [len]CHAR s;
           get bin(f,s);
           s
        ); \#get str\#

        IF (name OF e:=get str) /= ""
        THEN
          FOR i TO UPB address OF e
          DO
            (address OF e)[i]:=get str
          OD;
          dept OF e:=get str;
          ni code OF e:=get str;
          tax code OF e:=get str;
          get bin(f,(basic OF e,
                     overtime OF e,
                     net pay OF e,
                     tax OF e))
        FI
      END #get emp#;

      PROC put emp=(REF FILE f,
                    REF EMPLOYEE e)VOID:
        put(f,(name OF e,
               (40-UPB name OF e)*blank,
                fixed((net pay OF e)[week],
                       -8,2),
                newline));

      INT line:=60, page:=0;

      PROC heading = (REF FILE f)VOID:
      IF line = 60
      THEN line:=0; #reset the line count#
        put(f,
            (newpage,
             "Report of net pay for week ",
             whole(week,0),
             40*blank,"Page ",
             whole(page+:=1,0),
             newline,newline,
             "Employee name",
             28*blank,"Net pay",
             newline,newline))
      FI #heading#;

      EMPLOYEE employee;
      REAL total pay:=0; INT n:=0;

      on logical file end(emp,
       (REF FILE f)BOOL:
        (put(prn,
             ("Total net pay for ",
              whole(n,0),
              " employees =",
              fixed(total pay,-11,2),
              newline,
              newline,
              "End of report",newline));
        close(f);  close(prn);  stop;
        SKIP));

      DO
         heading(prn);
         get emp(emp,employee);

        IF name OF employee /= ""
        THEN
           total pay+:=
            (net pay OF employee)[week];
           n+:=1;
           #count of total employees#
           put emp(prn,employee);
           line+:=1
        FI
      OD
   END
   FINISH
\end{verbatim}
\end{answer}

\begin{answer}{10}
\item[\special{html:<a href="ex-x-i">}Ex\special {html:</a>}
\special{html:<a name="ans-x-i">}10.1\special {html:</a>}]
 Deproceduring and dereferencing (not weakly-deref\-eren\-cing).
\item[\special{html:<a href="ex-x-ii">}Ex\special {html:</a>}
\special{html:<a name="ans-x-ii">}10.2\special {html:</a>}]
 None.
\item[\special{html:<a href="ex-x-iii">}Ex\special {html:</a>}
\special{html:<a name="ans-x-iii">}10.3\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 Yes.
\item[(b)]
 No (cannot widen).
\item[(c)]
 No
(cannot dereference).
\item[(d)]
 No
(cannot row).
\item[(e)]
 No
(cannot dereference).
\item[(f)]
 No (cannot unite after rowing).
\end{description}
\end{answer}

\begin{answer}{10}
\item[\special{html:<a href="ex-x-iv">}Ex\special {html:</a>}
\special{html:<a name="ans-x-iv">}10.4\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 Row-display,
structure-display, collateral clause.
\item[(b)]
 Parallel clause.
\item[(c)]
 Case clause.
\item[(d)]
 Conformity clause.
\item[(e)]
 Conditional clause.
\item[(f)]
 Closed clause or enclosed clause.
\end{description}
\end{answer}

\begin{answer}{10}
\item[\special{html:<a href="ex-x-v">}Ex\special {html:</a>}
\special{html:<a name="ans-x-v">}10.5\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 Weak.
\item[(b)]
 Meek.
\end{description}
\item[\special{html:<a href="ex-x-vi">}Ex\special {html:</a>}
\special{html:<a name="ans-x-vi">}10.6\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 6 (4 denotations, 1
applied-identifier, 1 closed clause).
\item[(b)]
 5 (1 denotation, 3
applied-identifiers, 1 call).
\item[(c)]
 5 (1 denotation, 3
applied-identifiers, 1 slice).
\item[(d)]
 (1 denotation, 1 closed clause,
1 cast, 1 applied-identifier).
\end{description}
\end{answer}

\begin{answer}{10}
\item[\special{html:<a href="ex-x-vii">}Ex\special {html:</a>}
\special{html:<a name="ans-x-vii">}10.7\special {html:</a>}]
 The identifier of a structure or a name referring to a structure.
\item[\special{html:<a href="ex-x-viii">}Ex\special {html:</a>}
\special{html:<a name="ans-x-viii">}10.8\special {html:</a>}]
 A
selection.
\item[\special{html:<a href="ex-x-ix">}Ex\special {html:</a>}
\special{html:<a name="ans-x-ix">}10.9\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 2.
\item[(b)]
 3.
\item[(c)]
 3.
\item[(d)]
 4.
\end{description}
\end{answer}

\begin{answer}{10}
\item[\special{html:<a href="ex-x-x">}Ex\special {html:</a>}
\special{html:<a name="ans-x-x">}10.10\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 A primary.
\item[(b)]
 A primary.
\item[(c)]
 A secondary.
\item[(d)]
 A primary.
\item[(e)]
 A primary.
\item[(f)]
 Tertiary.
\item[(g)]
 Enclosed clause.
\item[(h)]
 A quaternary.
\item[(i)]
 It is not a unit.
\item[(j)]
 A quaternary.
\end{description}
\item[\special{html:<a href="ex-x-xi">}Ex\special {html:</a>}
\special{html:<a name="ans-x-xi">}10.11\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 2 denotations $+$ 2
applied-identifiers $=$ 4 primaries. 1 closed clause. 3~formul\ae{}
$=$ 3 tertiaries.
\item[(b)]
 1 denotation $+$ 3
applied-identifiers $=$ 4 primaries. 3 formul\ae{} $=$ 3 tertiaries.
\item[(c)]
 2 applied-identifiers $+$ 1 call $=$ 3
primaries.
\item[(d)]
 3 denotations $+$ 1 applied-identifier
$+$ 1 slice $=$ 5 primaries.
\item[(e)]
 2 denotations $+$ 3
applied-identifiers $=$ 5 primaries; 1 conditional clause $=$ 1
enclosed clause, 2 formul\ae{} $=$ 2 tertiaries, 1 assignment $=$ 1
quaternary.
\item[(f)]
 2 denotations $+$ 5
applied-identifiers $=$ 7 primaries, 1 formula $=$ 1 tertiary, 1
assignation $=$ 1 quaternary, 1 case clause $+$ 1 conditional clause
$=$ 2 enclosed clauses.
\item[(g)]
 2 denotations $+$ 2
applied-identifiers $=$ 4 primaries, 2 assignments $=$ 2
quaternaries, 1 parallel clause $=$ 1 enclosed clause.
\end{description}
\end{answer}

\begin{answer}{10}
\item[\special{html:<a href="ex-x-xii">}Ex\special {html:</a>}
\special{html:<a name="ans-x-xii">}10.12\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 The conditional clause
can yield a value of mode \verb|REF INT| or \texttt{REF REAL}. In a
firm context, these can be coerced to \verb|INT| and \verb|REAL|.
Thus the \verb|INT| is widened to \verb|REAL| and the balanced clause
yields a value of mode \verb|REAL|.
\item[(b)]
 The conditional clause in a soft
context will yield \verb|REF INT| or \verb|REF REAL|. Neither can be
coerced to the other in a strong context, so the clause cannot be
balanced. The error message from the compiler arises from the
coercions applied in a strong context for the attempted balancing.
\item[(c)]
 The
conformity clause yields \verb|INT| or \verb|REAL|. In a strong
context, \verb|INT| can be widened to \verb|REAL|. Thus the balanced
clause will yield \verb|REAL|.
\item[(d)]
 The conditional clause
yields \verb|INT| or whatever. In a strong context, \verb|SKIP| will
yield \verb|INT|. Thus the balanced clause yields \verb|INT|.
However, the result will be undefined if the \verb|SKIP| is used in
the assignment.
\end{description}
\end{answer}

\begin{answer}{10}
\item[\special{html:<a href="ex-x-xiii">}Ex\special {html:</a>}
\special{html:<a name="ans-x-xiii">}10.13\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 Yes.
\item[(b)]
 Yes.
\item[(c)]
 No.
\item[(d)]
 No.
\item[(e)]
 Yes.
\item[(f)]
 Yes.
\item[(g)]
 Yes.
\item[(h)]
 No.
\item[(i)]
 Yes! It's an example in the
``Revised Report''.
\end{description}
\end{answer}

\begin{answer}{11}
\item[\special{html:<a href="ex-xi-i">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-i">}11.1\special {html:</a>}]
 \begin{verbatim}
   PROGRAM ex11 1 1 CONTEXT VOID
   USE standard
   BEGIN
      []CHAR digits =
            "0123456789abcdef"[@0];

      PROC itostr = (INT n,r#adix#)STRING:
      IF n<r
      THEN digits[n]
      ELSE itostr(n%r,r)+digits[n%*r]
      FI;

      print(("Table of numbers 0--15",
             newline,newline,
             "Dec. Hex. Binary",newline));

      FOR i FROM 0 TO 15
      DO
         STRING bin = itostr(i,2),
                dec = itostr(i,10),
                hex = digits[i];
                #only one digit#
         print(((4-UPB dec)*blank,
                dec,3*blank,hex,
                4*blank,(4-UPB bin)*"0",
                bin,newline))
      OD
   END
   FINISH
\end{verbatim}
\item[\special{html:<a href="ex-xi-ii">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-ii">}11.2\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \begin{eqnarray*}
94_{10}&=&5\times16^1+14\times16^0\\
       &=&5\hbox{e}_{16}
\end{eqnarray*}
\item[(b)]
 \begin{eqnarray*}
13_{10}&=&1\times2^3+1\times2^2+0\times2^1+1\times2^0\\
       &=&1101_2
\end{eqnarray*}
\item[(c)]
 \begin{eqnarray*}
1111\,1001_2&=&\hbox{f}9_{16}
\end{eqnarray*}
\item[(d)]
 \begin{eqnarray*}
3\hbox{e}1_{16}&=&3\times16^2+\hbox{e}\times16^1+1\times16^0\\
               &=&3\times256+14\times16+1\\
               &=&768+224+1\\
               &=&993_{10}
\end{eqnarray*}
\item[(e)]
 $2\hbox{c}_{16}=0010\,1100_2$.
\item[(f)]
 \begin{eqnarray*}
10101_2&=&1\times2^4+1\times2^2+1\times2^0\\
       &=&16+4+1\\
       &=&21_{10}
\end{eqnarray*}
\end{description}
\item[\special{html:<a href="ex-xi-iii">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-iii">}11.3\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 $1011_2$
\item[(b)]
 $\hbox{e}3_{16}$
\item[(c)]
 $56_8$
\end{description}
\end{answer}

\begin{answer}{11}
\item[\special{html:<a href="ex-xi-iv">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-iv">}11.4\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|16r 0101 0101|
\item[(b)]
 \verb|16r 99bb ddff|
\item[(c)]
 \verb|16r 6745 2301|
\item[(d)]
 \verb|FALSE|
\end{description}
\item[\special{html:<a href="ex-xi-v">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-v">}11.5\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|16r 558|
\item[(b)]
 \verb|16r 17|
\end{description}
\end{answer}

\begin{answer}{11}
\item[\special{html:<a href="ex-xi-vi">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-vi">}11.6\special {html:</a>}]
 \ %
\begin{verbatim}
   PROC transpose=(REF[,]INT m)VOID:
   IF   1 UPB m - 1 LWB m
               =
        2 UPB m - 2 LWB m
   THEN #m is square#
      REF[,]INT mm=m[@1,@1]; #a precaution#

      FOR i TO 1 UPB mm - 1
      DO
         REF[]INT mr=mm[i,i+1:],
                  mc=mm[i+1:,i];
         []INT temp=mr;
         mr:=mc;  mc:=temp
      OD
   FI
\end{verbatim}
\end{answer}

\begin{answer}{11}
\item[\special{html:<a href="ex-xi-vii">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-vii">}11.7\special {html:</a>}]
 Use a cast: \verb|REF REAL(xx):=120.5|
\item[\special{html:<a href="ex-xi-viii">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-viii">}11.8\special {html:</a>}]
 \begin{verbatim}
   REF REF[]CHAR rrq;
   []CHAR m = "ABCDEFGHIJ";
   rrq:=LOC REF[]CHAR:=LOC[10]CHAR:=m[@1];
\end{verbatim}
\item[\special{html:<a href="ex-xi-ix">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-ix">}11.9\special {html:</a>}]
 \ \newline%
\begin{verbatim}
   REF FLEX[]INT rfi;
   rfi:=FLEX[1:0]INT:=(3,-2,4)
\end{verbatim}
\end{answer}

\begin{answer}{11}
\item[\special{html:<a href="ex-xi-x">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-x">}11.10\special {html:</a>}]
 \verb|f| has the
mode \verb|REF STRING| and \verb|ss| has the mode
\verb|REF REF STRING|.
\item[\special{html:<a href="ex-xi-xi">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-xi">}11.11\special {html:</a>}]
 The multiple of mode
\verb|STRING| whose value is \texttt{"Joan of Arc"}.
\item[\special{html:<a href="ex-xi-xii">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-xii">}11.12\special {html:</a>}]
 \verb|f[3:4]=s[7:8]|. The modes are both \verb|STRING|.
\item[\special{html:<a href="ex-xi-xiii">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-xiii">}11.13\special {html:</a>}]
 Here are three
possible answers:
\begin{verbatim}
   REF STRING(ff) IS ss
   ff IS REF STRING(ss)
   REF STRING(ff) IS REF STRING(ss)
\end{verbatim}
\noindent
You could also use \verb|ISNT|, \verb|:=:| or \verb|:/=:|.
\end{answer}

\begin{answer}{11}
\item[\special{html:<a href="ex-xi-xiv">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-xiv">}11.14\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 A name of mode \verb|REF REF FILE|.
\item[(b)]
 \verb|TRUE|\qquad\verb|BOOL|.
\item[(c)]
 A name of mode \verb|REF FILE|.
\item[(d)]
 \verb|FALSE|\qquad\verb|BOOL|.
\end{description}
\item[\special{html:<a href="ex-xi-xv">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-xv">}11.15\special {html:</a>}]
\ \par
\begin{description}
\item[(a)]
 \verb|REF FILE|
\item[(b)]
 \verb|REF REF FILE|
\end{description}
\end{answer}

\begin{answer}{11}
\item[\special{html:<a href="ex-xi-xvi">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-xvi">}11.16\special {html:</a>}]
 \begin{verbatim}
REF REF QUEUE(tail):=
        LOC QUEUE:=(("Barbara",3),nilq)
\end{verbatim}
\item[\special{html:<a href="ex-xi-xvii">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-xvii">}11.17\special {html:</a>}]
 \verb|tail:=next OF tail|
\item[\special{html:<a href="ex-xi-xviii">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-xviii">}11.18\special {html:</a>}]
 No.
\end{answer}

\begin{answer}{11}
\item[\special{html:<a href="ex-xi-xix">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-xix">}11.19\special {html:</a>}]
 \ %
\begin{verbatim}
   PROC add fan=(REF REF REF QUEUE
                    head,tail,
                 REF FAN fan)VOID:
      tail:=next OF (REF REF QUEUE
             (head IS nilq|head|tail):=
                HEAP QUEUE:=(fan,nilq))
\end{verbatim}
\item[\special{html:<a href="ex-xi-xx">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-xx">}11.20\special {html:</a>}]
 \ %
\begin{verbatim}
   PROGRAM ex11 9 2 CONTEXT VOID
   USE standard
   BEGIN
      MODE FAN = STRUCT(STRING name,
                        INT ticket),
         QUEUE = STRUCT(FAN fan,
                        REF QUEUE next);

      REF QUEUE nilq = NIL;

      PROC add fan=(REF REF REF QUEUE
                        head,tail,
                    REF FAN fan)VOID:
         tail:=next OF
                (REF REF QUEUE
                  (head IS nilq|head|tail)
                     :=HEAP QUEUE
                     :=(fan,nilq);

      REF REF QUEUE head,tail;
      head:=tail:=LOC REF QUEUE:=nilq;

      FOR q TO 1000
      DO
         add fan(head,tail,
                 LOC FAN:=(IF ODD q
                           THEN "Iain"
                           ELSE "Fiona"
                           FI,
                           q))
      OD
   END
   FINISH
\end{verbatim}
\noindent The generator \verb|LOC FAN| is used because \verb|add fan|
requires a parameter of mode \verb|REF FAN|. The scope of the
generated name is from the declarations of \verb|head| and
\verb|tail| to the end of the program because there are no identity
declarations in the \verb|FOR| loop clause (therefore it is not a
range).
\end{answer}

\begin{answer}{11}
\item[\special{html:<a href="ex-xi-xxi">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-xxi">}11.21\special {html:</a>}]
 Because \verb|marker| has mode
\verb|REF REF QUEUE|, it is made to refer to each \verb|REF QUEUE|
name in the linked-list. The condition
\begin{verbatim}
   next OF marker ISNT nilq
\end{verbatim}
\noindent
ensures that \verb|marker| is not currently referring to the last
\verb|REF QUEUE| in the list. The loop will terminate when
\verb|marker| refers to the last \verb|REF QUEUE| in the list or the
number of the ticket of the fan to be inserted in the queue does not
exceed the number of the ticket of the fan referred to by
\verb|marker|.
\medskip
If the operator \verb|AND| had been used, both operands would have been
elaborated before the operator; in which case, if the left operand
had yielded \verb|FALSE|, elaboration of the right operand would have
caused the run-time error \verb|"Selection from NIL"|.
\item[\special{html:<a href="ex-xi-xxii">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-xxii">}11.22\special {html:</a>}]
 This can best be done by
writing a program. Here is a possible solution:-
\begin{verbatim}
   PROGRAM ex11 10 2 CONTEXT VOID
   USE standard
   BEGIN
      MODE FAN = STRUCT(STRING name,
                        INT ticket),
         QUEUE = STRUCT(FAN fan,
                        REF QUEUE next);
      REF QUEUE nilq = NIL;

      PROC insert fan = . . .
      . . .
      PROC print queue = . . .
      . . .
      REF REF QUEUE head,tail;
      head:=tail:=LOC REF QUEUE:=nilq;
      INT max ticket = 1000;
      INT tickets issued:=0;
      [max ticket]BOOL ticket issued;

      FOR i
      FROM LWB ticket issued
      TO UPB ticket issued
      DO FALSE OD;

      WHILE tickets issued < max ticket
      DO
         INT i=random int(max ticket);
         IF REF BOOL ti=ticket issued[i];
            NOT ti
         THEN
            ti:=TRUE;
            insert fan(head,tail,HEAP FAN:=
                       ((ODD i
                        |"Iain"
                        |"Fiona"
                        ),i));
            tickets issued+:=1
         FI
      OD #fans added to the queue#;

      print queue(head)
   END FINISH
\end{verbatim}
\noindent Instead of sending the output to \verb|stand out|, it would be
better to direct it to an output book so that the results could be
examined at leisure.  Alternatively, command line redirection could
be used.  The use of \verb|ticket issued| ensures that unique ticket
numbers are added to the queue since \verb|insert fan| does not cater
explicitly for duplicate ticket numbers.
\item[\special{html:<a href="ex-xi-xxiii">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-xxiii">}11.23\special {html:</a>}]
 The procedure
has to find the fan concerned and must keep track of the reference to
that fan.
\begin{verbatim}
   PROC delete fan=(REF REF QUEUE q,
                    INT t#icket#
                   )UNION(REF FAN,BOOL):
   IF   q IS nilq
   THEN FALSE #empty queue#
   ELIF next OF q IS nilq
   THEN #last fan in the queue#
      IF   ticket OF q = t
      THEN REF FAN rf = q;
         q:=nilq;  #delete last fan#
         rf
      ELSE FALSE
      FI
   ELIF ticket OF next OF q < t
   THEN delete fan(next OF q,t)
   ELIF ticket OF next OF q > t
   THEN #not found# FALSE
   ELSE REF FAN rf = next OF q;
      next OF q:=next OF next OF q;
      rf
   FI #delete fan#;
\end{verbatim}
\noindent
In the assignment, the mode of \verb|next OF q| is \verb|REF|
\verb|REF| \verb|QUEUE|, so the mode of \verb|next OF next OF q| must
be \verb|REF| \verb|QUEUE|. Look at the required dereferencing to see
what is assigned to \verb|next OF q|.
\end{answer}

\begin{answer}{11}
\item[\special{html:<a href="ex-xi-xxiv">}Ex\special {html:</a>}
\special{html:<a name="ans-xi-xxiv">}11.24\special {html:</a>}]
 \ \newline%
\begin{verbatim}
   PROGRAM ex11 11 1 CONTEXT VOID
   USE standard
   BEGIN
      MODE
      LETTER=STRUCT(CHAR c,INT o),
      TREE=STRUCT(REF LETTER l,
                  REF TREE left,right);

      REF TREE leaf=NIL;
      REF TREE root:=leaf;

      PROC get letter=(REF FILE f)
                        REF LETTER:
      IF   CHAR ch;  get(f,ch);
           ch>="A" & ch<="Z"
                  OR
           ch>="a" & ch<="z"
      THEN HEAP LETTER:=(ch,1)
      ELSE get letter(f) #skip non-letters#
      FI #get letter#;

      PROC add letter=
            (REF REF TREE root,
             REF LETTER let)VOID:
      IF   root IS leaf
      THEN root:=HEAP TREE:=(let,leaf,leaf)
      ELIF c OF l OF root > c OF let
      THEN add letter(left OF root,let)
      ELIF c OF l OF root < c OF let
      THEN add letter(right OF root,let)
      ELSE o OF l OF root+:=1
      FI #add letter#;

      FILE inf, arg;
      STRING in bk;

      INT max row=13;
      [max row,81]CHAR out page;
      INT row:=max row, col:=0;

      FOR i TO max row
      DO
         out page[i,:80]:=80*blank;
         out page[i,81]:=lf
      OD #initialise out page#;

      INT num letters:=0;

      PROC put letter=(REF LETTER let)VOID:
      BEGIN
         IF   row=max row
         THEN col+:=1;  row:=1
         ELSE row+:=1
         FI;
         FILE f;
         establish(f,
                   "",
                   mem channel,
                   1,1,20);
         put(f,(c OF let,
                fixed(o OF let/
                        num letters*100,
                      -7,2),blank*12));
         out page[row,(col-1)*20+1:col*20]
           :=file buffer(f);
         close(f)
      END #put letter#;

      PROC print tree=
            (REF REF TREE root)VOID:
      IF   root ISNT leaf
      THEN
         print tree(left OF root);
         IF o OF l OF root > 0
         THEN put letter(l OF root)
         FI;
         print tree(right OF root)
      FI #print tree#;

      IF open(arg,"",arg channel)/=0
      THEN
         put(stand error,
             ("Cannot access arguments",
              newline));
         stop
      ELIF
         on logical file end(arg,
          (REF FILE f)BOOL:
           (put(stand error,
             ("Usage: tt in-book",
              newline)); stop; SKIP));
         get(arg,(LOC STRING,
                  LOC CHAR,
                  in bk));
         open(inf,
              in bk,
              stand in channel)/=0
      THEN
         put(stand error,
             ("Cannot open book ",in bk,
              newline));
         stop
      ELSE
         on logical file end(inf,
          (REF FILE f)BOOL:
           (
            print tree(root);
            print((
               "Frequency of occurrence ",
               "of letters in the book ",
               idf(f),newline,
               newline,out page,newline,
               "Total letters read: ",
               whole(num letters,0),
               newline));
            stop;  SKIP
           ))
      FI;

      FOR i TO 26 #letters in the alphabet#
      DO
         add letter(
            root,
            HEAP LETTER:=
             (REPR(ABS("A")-1+i),0));
         add letter(
            root,
            HEAP LETTER:=
             (REPR(ABS("a")-1+i),0))
      OD #all letters are now in the tree#;

      DO
         add letter(root,get letter(inf));
         num letters+:=1
      OD
   END
   FINISH
\end{verbatim}
\end{answer}
